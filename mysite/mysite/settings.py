"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import logging
import configparser

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ローカルセッティング
config = configparser.RawConfigParser()
if os.path.exists(os.path.join(os.path.dirname(BASE_DIR),"settings","local_setting.ini")):
    config.read(os.path.join(os.path.dirname(BASE_DIR),"settings","local_setting.ini"))
else:
    config.read(os.path.join(os.path.dirname(BASE_DIR),"settings","local_setting_sample.ini"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.get('environment','SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.getboolean('environment', 'DEBUG')

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_db_logger',
    'linq.apps.LinqConfig',
    'wg.apps.WgConfig',
    'zoom.apps.ZoomConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config.get('database','DATABASE_ENGINE'),
        'NAME': config.get('database','DATABASE_NAME'),
        'USER': config.get('database','DATABASE_USER'),
        'PASSWORD': config.get('database','DATABASE_PASSWORD'),
        'HOST': config.get('database','DATABASE_HOST'),
        'PORT': config.get('database','DATABASE_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)
STATIC_ROOT = "/home/django/static/static"

# zoom
API_KEY = config.get('zoom','API_KEY')
API_SECRET = config.get('zoom','API_SECRET')
USER_ID = config.get('zoom','USER_ID')
FORM_PASSWORD = config.get('zoom','FORM_PASSWORD')

# line
CHANNEL_ACCESS_TOKEN = config.get('line', 'CHANNEL_ACCESS_TOKEN')
CHANNEL_SECRET = config.get('line', 'CHANNEL_SECRET')
APPROVED_IDS = config.get('line', 'APPROVED_IDS').split('|')

# ロギングの設定
DJANGO_DB_LOGGER_ENABLE_FORMATTER = True
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[%(server_time)s] %(message)s a',
        },
        #プロジェクト用のフォーマットを追加
        'detail': {
            'format': '\t'.join([
                "[%(levelname)s]",
                "%(asctime)s",
                "%(name)s.%(funcName)s:%(lineno)s",
                "%(message)s",
            ])
        },
        'database': {
            'format': '\t'.join([
                "%(funcName)s:%(lineno)s",
                "%(message)s",
            ])
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',   #コンソールの出力水準をDEBUGに下げる
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'detail'   #フォーマッター追加
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'database':{
            'level':'DEBUG',
            'class':'django_db_logger.db_log_handler.DatabaseLogHandler',
            'formatter': 'database'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console','database'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server',],
            'level': 'INFO',
            'propagate': False,
        },
        #自身のプロジェクトの設定を追加
        'zoom': {
            'handlers': ['console','database'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}
